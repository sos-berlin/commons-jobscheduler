/* SOS_JS_CONSUMED_IN_CONDITIONS */
CREATE OR REPLACE FUNCTION tmp() RETURNS VOID AS $$ DECLARE c integer; BEGIN SELECT COUNT(*) INTO c FROM pg_class, pg_namespace, pg_user WHERE UPPER(pg_class.relname) = 'SOS_JS_CON_CONDITIONS_ID_SEQ' AND pg_namespace.oid = pg_class.relnamespace AND pg_class.relowner = pg_user.usesysid and pg_user.usename = current_user; IF c = 0 THEN EXECUTE '
CREATE SEQUENCE SOS_JS_CON_CONDITIONS_ID_SEQ
INCREMENT BY 1 
START WITH 1 
MINVALUE 1 CYCLE;
';
END IF; RETURN; END; $$ LANGUAGE plpgsql;
SELECT tmp();
COMMIT;


CREATE OR REPLACE FUNCTION tmp() RETURNS VOID AS $$ DECLARE c integer; BEGIN SELECT COUNT(*) INTO c FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG=CURRENT_DATABASE() AND TABLE_SCHEMA=CURRENT_SCHEMA() AND UPPER(TABLE_NAME)='SOS_JS_CONSUMED_IN_CONDITIONS'; IF c = 0 THEN EXECUTE '

  CREATE TABLE SOS_JS_CONSUMED_IN_CONDITIONS (	
    "ID" BIGINT NOT NULL DEFAULT NEXTVAL(''SOS_JS_CON_CONDITIONS_ID_SEQ''),
	"SESSION" VARCHAR(100) NOT NULL, 
	"IN_CONDITION_ID" BIGINT NOT NULL, 
	"CREATED" TIMESTAMP NOT NULL,
	CONSTRAINT SOS_JS_CONSUMED_IN_CONDITIONS_UNIQUE UNIQUE ("SESSION", "IN_CONDITION_ID"),
    PRIMARY KEY ("ID")
   )
';
END IF; RETURN; END; $$ LANGUAGE plpgsql;

SELECT tmp();
COMMIT;



/* SOS_JS_EVENTS */
CREATE OR REPLACE FUNCTION tmp() RETURNS VOID AS $$ DECLARE c integer; BEGIN SELECT COUNT(*) INTO c FROM pg_class, pg_namespace, pg_user WHERE UPPER(pg_class.relname) = 'SOS_JS_EVENTS_SEQ' AND pg_namespace.oid = pg_class.relnamespace AND pg_class.relowner = pg_user.usesysid and pg_user.usename = current_user; IF c = 0 THEN EXECUTE '
CREATE SEQUENCE SOS_JS_EVENTS_SEQ
INCREMENT BY 1 
START WITH 1 
MINVALUE 1 CYCLE;
';
END IF; RETURN; END; $$ LANGUAGE plpgsql;
SELECT tmp();
COMMIT;

CREATE OR REPLACE FUNCTION tmp() RETURNS VOID AS $$ DECLARE c integer; BEGIN SELECT COUNT(*) INTO c FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG=CURRENT_DATABASE() AND TABLE_SCHEMA=CURRENT_SCHEMA() AND UPPER(TABLE_NAME)='SOS_JS_EVENTS'; IF c = 0 THEN EXECUTE '

  CREATE TABLE SOS_JS_EVENTS(	
    "ID" BIGINT NOT NULL DEFAULT NEXTVAL(''SOS_JS_EVENTS_SEQ''),
	"SESSION" VARCHAR(100) NOT NULL, 
	"EVENT" VARCHAR(255) NOT NULL, 
	"WORKFLOW" VARCHAR(255) NOT NULL,
	"CREATED" TIMESTAMP NOT NULL,
	CONSTRAINT SOS_JS_EVENTS_UNIQUE UNIQUE ("SESSION", "EVENT", "WORKFLOW"),
    PRIMARY KEY ("ID")
   )
';
END IF; RETURN; END; $$ LANGUAGE plpgsql;
SELECT tmp();
COMMIT;
   
/* SOS_JS_IN_CONDITION_COMMANDS */
CREATE OR REPLACE FUNCTION tmp() RETURNS VOID AS $$ DECLARE c integer; BEGIN SELECT COUNT(*) INTO c FROM pg_class, pg_namespace, pg_user WHERE UPPER(pg_class.relname) = 'SOS_JS_IN_CONDITION_COMMANDS_SEQ' AND pg_namespace.oid = pg_class.relnamespace AND pg_class.relowner = pg_user.usesysid and pg_user.usename = current_user; IF c = 0 THEN EXECUTE '
CREATE SEQUENCE SOS_JS_IN_CONDITION_COMMANDS_SEQ
INCREMENT BY 1 
START WITH 1 
MINVALUE 1 CYCLE;
';
END IF; RETURN; END; $$ LANGUAGE plpgsql;
SELECT tmp();
COMMIT;


CREATE OR REPLACE FUNCTION tmp() RETURNS VOID AS $$ DECLARE c integer; BEGIN SELECT COUNT(*) INTO c FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG=CURRENT_DATABASE() AND TABLE_SCHEMA=CURRENT_SCHEMA() AND UPPER(TABLE_NAME)='SOS_JS_IN_CONDITION_COMMANDS'; IF c = 0 THEN EXECUTE '
  CREATE TABLE SOS_JS_IN_CONDITION_COMMANDS (	
    "ID" BIGINT NOT NULL DEFAULT NEXTVAL(''SOS_JS_IN_CONDITION_COMMANDS_SEQ''),
	"IN_CONDITION_ID" BIGINT NOT NULL, 
	"COMMAND" VARCHAR(255) NOT NULL,  
	"COMMAND_PARAM" VARCHAR(255),
    PRIMARY KEY ("ID")
   )  
';
END IF; RETURN; END; $$ LANGUAGE plpgsql;
SELECT tmp();
COMMIT;
 
/* SOS_JS_IN_CONDITIONS */
CREATE OR REPLACE FUNCTION tmp() RETURNS VOID AS $$ DECLARE c integer; BEGIN SELECT COUNT(*) INTO c FROM pg_class, pg_namespace, pg_user WHERE UPPER(pg_class.relname) = 'SOS_JS_IN_CONDITIONS_SEQ' AND pg_namespace.oid = pg_class.relnamespace AND pg_class.relowner = pg_user.usesysid and pg_user.usename = current_user; IF c = 0 THEN EXECUTE '
CREATE SEQUENCE SOS_JS_IN_CONDITIONS_SEQ
INCREMENT BY 1 
START WITH 1 
MINVALUE 1 CYCLE;
';
END IF; RETURN; END; $$ LANGUAGE plpgsql;
SELECT tmp();
COMMIT;

CREATE OR REPLACE FUNCTION tmp() RETURNS VOID AS $$ DECLARE c integer; BEGIN SELECT COUNT(*) INTO c FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG=CURRENT_DATABASE() AND TABLE_SCHEMA=CURRENT_SCHEMA() AND UPPER(TABLE_NAME)='SOS_JS_IN_CONDITIONS'; IF c = 0 THEN EXECUTE '
  CREATE TABLE SOS_JS_IN_CONDITIONS (	
    "ID" BIGINT NOT NULL DEFAULT NEXTVAL(''SOS_JS_IN_CONDITIONS_SEQ''),
	"MASTER_ID" VARCHAR(100) NOT NULL, 
	"JOB" VARCHAR(255) NOT NULL, 
	"EXPRESSION" VARCHAR(255) NOT NULL,
	"WORKFLOW" VARCHAR(255) NOT NULL,
    PRIMARY KEY ("ID")
   )
';
END IF; RETURN; END; $$ LANGUAGE plpgsql;
SELECT tmp();
COMMIT;
 
/* SOS_JS_OUT_CONDITION_EVENTS */
CREATE OR REPLACE FUNCTION tmp() RETURNS VOID AS $$ DECLARE c integer; BEGIN SELECT COUNT(*) INTO c FROM pg_class, pg_namespace, pg_user WHERE UPPER(pg_class.relname) = 'SOS_JS_OUT_CONDITION_EVENTS_SEQ' AND pg_namespace.oid = pg_class.relnamespace AND pg_class.relowner = pg_user.usesysid and pg_user.usename = current_user; IF c = 0 THEN EXECUTE '
CREATE SEQUENCE SOS_JS_OUT_CONDITION_EVENTS_SEQ
INCREMENT BY 1 
START WITH 1 
MINVALUE 1 CYCLE;
';
END IF; RETURN; END; $$ LANGUAGE plpgsql;
SELECT tmp();
COMMIT;

 
CREATE OR REPLACE FUNCTION tmp() RETURNS VOID AS $$ DECLARE c integer; BEGIN SELECT COUNT(*) INTO c FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG=CURRENT_DATABASE() AND TABLE_SCHEMA=CURRENT_SCHEMA() AND UPPER(TABLE_NAME)='SOS_JS_OUT_CONDITION_EVENTS'; IF c = 0 THEN EXECUTE '
  CREATE TABLE SOS_JS_OUT_CONDITION_EVENTS (
    "ID" BIGINT NOT NULL DEFAULT NEXTVAL(''SOS_JS_OUT_CONDITION_EVENTS_SEQ''),
	"OUT_CONDITION_ID" BIGINT NOT NULL, 
	"EVENT" VARCHAR(255) NOT NULL, 
    PRIMARY KEY ("ID")
   )
';
END IF; RETURN; END; $$ LANGUAGE plpgsql;
SELECT tmp();
COMMIT;


/* SOS_JS_OUT_CONDITIONS */
CREATE OR REPLACE FUNCTION tmp() RETURNS VOID AS $$ DECLARE c integer; BEGIN SELECT COUNT(*) INTO c FROM pg_class, pg_namespace, pg_user WHERE UPPER(pg_class.relname) = 'SOS_JS_OUT_CONDITIONS_SEQ' AND pg_namespace.oid = pg_class.relnamespace AND pg_class.relowner = pg_user.usesysid and pg_user.usename = current_user; IF c = 0 THEN EXECUTE '
CREATE SEQUENCE SOS_JS_OUT_CONDITIONS_SEQ
INCREMENT BY 1 
START WITH 1 
MINVALUE 1 CYCLE;
';
END IF; RETURN; END; $$ LANGUAGE plpgsql;
SELECT tmp();
COMMIT;   

CREATE OR REPLACE FUNCTION tmp() RETURNS VOID AS $$ DECLARE c integer; BEGIN SELECT COUNT(*) INTO c FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG=CURRENT_DATABASE() AND TABLE_SCHEMA=CURRENT_SCHEMA() AND UPPER(TABLE_NAME)='SOS_JS_OUT_CONDITIONS'; IF c = 0 THEN EXECUTE '
  CREATE TABLE SOS_JS_OUT_CONDITIONS(
    "ID" BIGINT NOT NULL DEFAULT NEXTVAL(''SOS_JS_OUT_CONDITIONS_SEQ''),
	"MASTER_ID" VARCHAR(100) NOT NULL, 
	"JOB" VARCHAR(255) NOT NULL, 
	"EXPRESSION" VARCHAR(255) NOT NULL,
	"WORKFLOW" VARCHAR(255) NOT NULL,
    PRIMARY KEY ("ID")
   ) 
';
END IF; RETURN; END; $$ LANGUAGE plpgsql;
   
DROP FUNCTION tmp();
COMMIT;
 

 



